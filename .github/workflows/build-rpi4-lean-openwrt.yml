#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Raspberry Pi 4 OpenWrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 18 1 9 *
#  watch:
#    types: started

env:
  TOOLCHAIN_TAG: coolsnowwolf-lede-master
  TOOLCHAIN_NAME: toolchain-image-coolsnowwolf-lede-master-bcm27xx-bcm2711.img
  CONFIG_FILE: config/bcm27xx/bcm2711.config
  DIY_SH: scripts/lean-openwrt.sh
  WEBROOT: /data/dnmp/www/openwrt.cc
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-18.04

    outputs:
      OPENWRTROOT: ${{ steps.prepare.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.packages.outputs.PLATFORM }}
      TARGET: ${{ steps.packages.outputs.TARGET }}
      SUBTARGET: ${{ steps.packages.outputs.SUBTARGET }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) rdate
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f

      - name: Free Up More Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 256
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          overprovision-lvm: 'true'

      - name: Checkout
        uses: actions/checkout@main

      - name: Prepare Toolchain Image
        id: prepare
        run: |
          df -hT $PWD
          wget -q https://github.com/SuLingGG/OpenWrt-Toolchain/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_NAME -O toolchain-image.img
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop toolchain-image.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
          git pull
          mkdir -p dl
          echo "::set-output name=SOURCE_COMMIT::$(git log -1 --format='%H')"

      - name: Install Feeds
        id: feeds
        run: |
          cd $OPENWRTROOT
          chmod +x ../scripts/*.sh
          ../scripts/hook-feeds.sh

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRTROOT/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
          cat config/general-packages.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          echo -e "CONFIG_USB_LAN78XX=y\nCONFIG_USB_NET_DRIVERS=y" >> target/linux/bcm27xx/bcm2711/config-5.4
          mkdir -p files/lib/firmware/brcm/
          wget -q https://raw.githubusercontent.com/openwrt/cypress-nvram/master/brcmfmac43455-sdio.raspberrypi%2C4-model-b.txt -O files/lib/firmware/brcm/brcmfmac43455-sdio.raspberrypi,4-compute-module.txt
          ../$DIY_SH
          ../scripts/enable-rpi4-wifi.sh
          make defconfig

      - name: Cache DL Packages
        uses: actions/cache@v2
        id: cache
        with:
          path: openwrt/dl
          key: ${{ steps.prepare.outputs.SOURCE_COMMIT }}

      - name: Download DL Package
        id: package
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd $OPENWRTROOT
          make download -j16 && make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Tools
        id: tools
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Packages
        id: packages
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
          make diffconfig
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index
          cd $OPENWRTROOT/bin/packages/*
          PLATFORM=$(basename `pwd`)
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "::set-output name=TARGET::$(echo $TARGET)"
          cd *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
          echo "::set-output name=COMPILE_STATUS::success"

      - name: Generate Firmware
        if: steps.packages.outputs.COMPILE_STATUS == 'success'
        id: generate
        run: |
          cd data/opkg
          sed -i "s/subtarget/$SUBTARGET/g" distfeeds*.conf
          sed -i "s/target\//$TARGET\//g" distfeeds*.conf
          sed -i "s/platform/$PLATFORM/g" distfeeds*.conf
          cd $OPENWRTROOT
          echo "dtparam=i2c_arm=on,audio=on" >> target/linux/bcm27xx/image/config.txt
          mkdir -p files/etc/uci-defaults/
          cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          mkdir -p files/etc/opkg
          cp ../data/opkg/distfeeds.conf.mirror files/etc/opkg
          mkdir -p files/www/snapshots
          cp -r bin/targets files/www/snapshots
          cp ../data/opkg/distfeeds.conf files/etc/opkg
          mkdir -p files/www/ipv6-modules
          cp bin/packages/$PLATFORM/luci/luci-proto-ipv6* files/www/ipv6-modules
          cp bin/packages/$PLATFORM/base/{ipv6helper*,odhcpd-ipv6only*,odhcp6c*,6in4*} "files/www/ipv6-modules"
          cp bin/targets/$TARGET/$SUBTARGET/packages/{ip6tables*,kmod-nf-nat6*,kmod-ipt-nat6*,kmod-sit*,kmod-ip6tables-extra*} "files/www/ipv6-modules"
          mkdir -p files/bin
          cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make checksum
          echo "::set-output name=GENERATE_STATUS::success"

      - name: Upload Bin Folder
        uses: actions/upload-artifact@main
        if: steps.generate.outputs.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt/bin

  Upload:
    needs: [Build]
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore Variables
        run: |
          echo "OPENWRTROOT=$(echo '${{needs.Build.outputs.OPENWRTROOT}}')" >> $GITHUB_ENV
          echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> $GITHUB_ENV
          echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> $GITHUB_ENV
          echo "DATETIME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      - name: Download Bin Folder
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt/bin

      # - name: Deploy Packages-Server
      #   if: env.GENERATE_STATUS == 'success'
      #   run: |
      #     sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
      #     mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
      #     cp -r $OPENWRTROOT/bin/packages server/web/snapshots
      #     cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
      #     mv server packages-server
      #     zip -qrm packages-server.zip packages-server
      #     mv packages-server.zip $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET

      - name: Deploy Files To HostHatch Node
        id: hosthatch
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.HOSTHATCH_IP }}"
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{secrets.HOSTHATCH_PRIVATEKEY}}"
        if: env.GENERATE_STATUS == 'success' && env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{secrets.HOSTHATCH_PRIVATEKEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET'"
          rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS

      - name: Deploy Files To PacificRack Node
        id: pacificrack
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.PACIFICRACK_IP }}"
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{secrets.PACIFICRACK_PRIVATEKEY}}"
        if: env.GENERATE_STATUS == 'success' && env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{secrets.PACIFICRACK_PRIVATEKEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET'"
          rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS
          echo "::warning file=openwrt.cc::Download Link: https://openwrt.cc/releases/targets/bcm27xx/bcm2711"

      - name: Organize Files
        id: organize
        if: env.GENERATE_STATUS == 'success'
        run: |
          cd $OPENWRTROOT
          zip -qr $TARGET-$SUBTARGET.zip bin
          cd bin/targets/$TARGET/$SUBTARGET
          rm -rf packages
          df -hT $PWD
          echo "::set-output name=ORGANIZE_STATUS::success"

      - name: Deploy Files To Release
        id: release
        uses: ncipollo/release-action@v1.8.0
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_RELEASE == 'true'
        with:
          name: OpenWrt-${{ env.TARGET }}-${{ env.SUBTARGET }}
          tag: ${{ env.DATETIME }}
          commit: dev
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*

      - name: Deploy Files To Onedrive
        id: onedrive
        env:
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "releases/targets/${{ env.TARGET }}"
          ONEDRIVEUPLOADER_CONF: "${{ secrets.ONEDRIVEUPLOADER_CONF }}"
        if: env.GENERATE_STATUS == 'success' && env.ONEDRIVEUPLOADER_CONF != null
        run: |
          echo -e "${ONEDRIVEUPLOADER_CONF}" | tee ./auth.json > /dev/null
          wget -q https://raw.githubusercontent.com/MoeClub/OneList/master/OneDriveUploader/amd64/linux/OneDriveUploader
          chmod +x OneDriveUploader
          ./OneDriveUploader -f -c "./auth.json" -s $SOURCE_TARGETS -r $DEST_TARGETS
          ./OneDriveUploader -f -c "./auth.json" -s $SOURCE_TARGETS -r "archive/$(date +%Y)/$(date +%m)/$(date +%d)/releases/targets/$TARGET/$SUBTARGET"
          ./OneDriveUploader -f -c "./auth.json" -s $OPENWRTROOT/$TARGET-$SUBTARGET.zip -r "archive/$(date +%Y)/$(date +%m)/$(date +%d)/releases/bin-archive"
          echo "::warning file=mirror.openwrt.cc::Download Link: https://mirror.openwrt.cc/releases/targets/bcm27xx/bcm2711"
    
      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bin-archive
