#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Debug Raspberry Pi 4 OpenWrt

on:
  workflow_dispatch:
  # schedule:
  #   - cron: 0 18 * * *
  # watch:
  #   types: started

env:
  CONFIG_FILE: config/bcm27xx/bcm2711.config
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-18.06-k5.4
  DIY_SH: scripts/immortalwrt.sh
  WEBROOT: /data/dnmp/www/openwrt.cc
  TOOLCHAIN_RELEASE_UPLOAD: true
  FIRMWARE_RELEASE_UPLOAD: true
  CURRENT_BRANCH: main
  OPENWRTROOT: /home/runner/work/OpenWrt-Rpi/OpenWrt-Rpi/openwrt
  SOURCE_OWNER: immortalwrt
  SOURCE_REPO: immortalwrt
  PLATFORM: aarch64_cortex-a72
  TARGET: bcm27xx
  SUBTARGET: bcm2711
  TOOLCHAIN_IMAGE: toolchain-immortalwrt-immortalwrt-openwrt-18.06-k5.4-bcm27xx-bcm2711
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install rdate squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f

      - name: Combine Disks
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -f -P --show root.img)
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -f -P --show /mnt/mnt.img)
          sudo mkfs.btrfs -f -d raid0 -L combinedisk $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo mount -o nossd,compress=zstd $ROOT_LOOP_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          lsblk -lf
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Checkout
        uses: actions/checkout@main

      - name: Download Pre-Build Image
        run: |
          mkdir -p prebuild
          cd prebuild
          for i in {0..1}
          do
            wget -q https://github.com/SuLingGG/OpenWrt-Rpi/releases/download/toolchain/$TOOLCHAIN_IMAGE.img.0$i || break
          done

      - name: Prepare Pre-Build Image
        id: prepare
        run: |
          cd prebuild
          # for i in {1..9}
          # do
          #   cat $TOOLCHAIN_IMAGE.img.0$i >> $TOOLCHAIN_IMAGE.img.00 && rm $TOOLCHAIN_IMAGE.img.0$i || break
          # done
          cat $TOOLCHAIN_IMAGE.img.01 >> $TOOLCHAIN_IMAGE.img.00 && rm $TOOLCHAIN_IMAGE.img.01
          mv $TOOLCHAIN_IMAGE.img.00 ../$TOOLCHAIN_IMAGE.img
          cd ..
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
          cat config/general-packages-new.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          echo "::set-output name=SOURCE_COMMIT::$(git log -1 --format='%H')"
          make defconfig

      - name: Download DL Package
        id: download
        run: |
          cd $OPENWRTROOT
          make download -j64

      - name: Compile Packages
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Generate Firmware
        id: generate
        run: |
          cd data/opkg
          sed -i "s/subtarget/$SUBTARGET/g" distfeeds*.conf
          sed -i "s/target\//$TARGET\//g" distfeeds*.conf
          sed -i "s/platform/$PLATFORM/g" distfeeds*.conf
          cd $OPENWRTROOT
          echo "dtparam=i2c_arm=on,audio=on" >> target/linux/bcm27xx/image/config.txt
          mkdir -p files/etc/uci-defaults/
          cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          mkdir -p files/www/snapshots
          cp -r bin/targets files/www/snapshots
          cp ../data/opkg/distfeeds.conf files/etc/opkg
          mkdir -p files/www/ipv6-modules
          cp bin/packages/$PLATFORM/luci/luci-proto-ipv6* files/www/ipv6-modules
          cp bin/packages/$PLATFORM/base/{ipv6helper*,odhcpd-ipv6only*,odhcp6c*,6in4*} "files/www/ipv6-modules"
          cp bin/targets/$TARGET/$SUBTARGET/packages/{ip6tables*,kmod-nf-nat6*,kmod-ipt-nat6*,kmod-sit*,kmod-ip6tables-extra*} "files/www/ipv6-modules"
          mkdir -p files/bin
          cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum

      - name: Compress Bin Folder
        run: |
          cd $OPENWRTROOT
          zip -r $TARGET-$SUBTARGET.zip bin

      - name: Print Disk Usage
        run: |
          df -hT $GITHUB_WORKSPACE
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Upload Bin Archive
        uses: actions/upload-artifact@main
        with:
          name: bin-archive
          path: ${{ env.OPENWRTROOT }}/${{ env.TARGET }}-${{ env.SUBTARGET }}.zip

  # Upload:
  #   needs: [Build]
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Restore Variables
  #       run: |
  #         echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
  #         echo "OPENWRTROOT=$(echo '${{needs.Toolchain.outputs.OPENWRTROOT}}')" >> $GITHUB_ENV
  #         echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
  #         echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
  #         echo "PLATFORM=$(echo '${{needs.Toolchain.outputs.PLATFORM}}')" >> $GITHUB_ENV
  #         echo "TARGET=$(echo '${{needs.Toolchain.outputs.TARGET}}')" >> $GITHUB_ENV
  #         echo "SUBTARGET=$(echo '${{needs.Toolchain.outputs.SUBTARGET}}')" >> $GITHUB_ENV
  #         echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV

  #     - name: Initialization Environment
  #       env:
  #         DEBIAN_FRONTEND: noninteractive
  #       run: |
  #         sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
  #         sudo -E apt-get -qq update
  #         sudo -E apt-get -qq install zip unzip rsync
  #         sudo -E apt-get -qq autoremove --purge
  #         sudo -E apt-get -qq clean
  #         sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  #         docker image prune -a -f

  #     - name: Download Bin Archive
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: bin-archive
  #         path: ${{ env.OPENWRTROOT }}

  #     - name: Decompress Bin Archive
  #       run: |
  #         cd $OPENWRTROOT
  #         unzip $TARGET-$SUBTARGET.zip

  #     - name: Deploy Files To HostHatch Node
  #       env:
  #         HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.HOSTHATCH_IP }}"
  #         SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
  #         DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
  #         REMOTE_PRIVATEKEY: "${{secrets.HOSTHATCH_PRIVATEKEY}}"
  #       if: env.REMOTE_PRIVATEKEY != null
  #       run: |
  #         mkdir -p ~/.ssh/
  #         install -m 600 /dev/null ~/.ssh/id_rsa
  #         echo "${{secrets.HOSTHATCH_PRIVATEKEY}}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
  #         bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET'"
  #         rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS

  #     - name: Deploy Files To PacificRack Node
  #       env:
  #         HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.PACIFICRACK_IP }}"
  #         SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
  #         DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
  #         REMOTE_PRIVATEKEY: "${{secrets.PACIFICRACK_PRIVATEKEY}}"
  #       if: env.REMOTE_PRIVATEKEY != null
  #       run: |
  #         mkdir -p ~/.ssh/
  #         install -m 600 /dev/null ~/.ssh/id_rsa
  #         echo "${{secrets.PACIFICRACK_PRIVATEKEY}}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
  #         bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET'"
  #         rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS
  #         echo "::warning file=openwrt.cc::Download Link: https://openwrt.cc/releases/targets/bcm27xx/bcm2711"

  #     - name: Organize Files
  #       run: |
  #         cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
  #         rm -rf packages
  #         df -hT $PWD

  #     - name: Deploy Files To Release
  #       uses: ncipollo/release-action@v1.8.0
  #       if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
  #       with:
  #         name: openwrt-${{ env.TARGET }}-${{ env.SUBTARGET }}
  #         allowUpdates: true
  #         replacesArtifacts: true
  #         tag: ${{ env.TARGET }}-${{ env.SUBTARGET }}
  #         commit: ${{ env.CURRENT_BRANCH }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         artifacts: ${{ env.OPENWRTROOT }}/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*

  #     - name: Deploy Files To Onedrive
  #       env:
  #         SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
  #         DEST_TARGETS: "releases/targets/${{ env.TARGET }}"
  #         ONEDRIVEUPLOADER_CONF: "${{ secrets.ONEDRIVEUPLOADER_CONF }}"
  #       if: env.ONEDRIVEUPLOADER_CONF != null
  #       run: |
  #         echo -e "${ONEDRIVEUPLOADER_CONF}" | tee ./auth.json > /dev/null
  #         wget -q https://raw.githubusercontent.com/MoeClub/OneList/master/OneDriveUploader/amd64/linux/OneDriveUploader
  #         chmod +x OneDriveUploader
  #         ./OneDriveUploader -f -c "./auth.json" -s $SOURCE_TARGETS -r $DEST_TARGETS
  #         ./OneDriveUploader -f -c "./auth.json" -s $SOURCE_TARGETS -r "archive/$(date +%Y)/$(date +%m)/$(date +%d)/releases/targets/$TARGET/$SUBTARGET"
  #         ./OneDriveUploader -f -c "./auth.json" -s $OPENWRTROOT/$TARGET-$SUBTARGET.zip -r "archive/$(date +%Y)/$(date +%m)/$(date +%d)/releases/bin-archive"
  #         echo "::warning file=mirror.openwrt.cc::Download Link: https://mirror.openwrt.cc/releases/targets/bcm27xx/bcm2711"
